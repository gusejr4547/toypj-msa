services:
  mysql:
    image: mysql
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: mydb
      MYSQL_ROOT_PASSWORD: 1234
    networks: 
      - ecommerce-network


  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "4369:4369"
      - "5671:5671"
      - "15671:15671"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest	
    networks: 
      - ecommerce-network
    
  config-service:
    depends_on: 
      - rabbitmq
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]  # 상태 확인 명령어
    #   interval: 10s                  # 확인 간격
    #   timeout: 5s                    # 타임아웃
    #   retries: 5                     # 실패 시 재시도 횟수
    #   start_period: 5s              # 시작 후 대기 시간
    # environment:
    #   SPRING_RABBITMQ_HOST: rabbitmq
    #   SPRING_PROFILES_ACTIVE: default
    #   ENCRYPT_KEY-STORE_LOCATION: file:/apiEncryptionKey.jks
    networks:
      - ecommerce-network

  discovery-service:
    depends_on:
      - config-service
      # config-service:
      #     condition: service_healthy   # config-service가 healthy일 때만 시작
    build:
      context: ./discoveryservice
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    # environment:
    #   SPRING_CLOUD_CONFIG_NAME: ecommerce
    #   SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
    networks:
      - ecommerce-network

  apigateway-service:
    depends_on: 
      - discovery-service
    build:
      context: ./apigateway-service
      dockerfile: Dockerfile
    container_name: apigateway-service
    ports:
      - "8000:8000"
    environment:
      SPRING_CLOUD_CONFIG_NAME: ecommerce
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
    networks:
      - ecommerce-network

  kafka:
    image: apache/kafka:3.9.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1 # KRaft를 사용할 때 필요하다. 노드ID는 각 노드의 식별자
      KAFKA_PROCESS_ROLES: "broker,controller" # zookeeper를 사용하지 않고 KRaft를 사용
      KAFKA_LISTENERS: "CONTROLLER://:9093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092" # 컨트롤러, 외부접속, 내부 브로커끼리 통신 포트 설정
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:9092" # 외부에서 브로커에 접속할때 접근할 주소.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093" # zookeeper.connect와 대응하는 역할.
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER" # KRaft를 사용할 때 필요함.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - ecommerce-network
  
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - "--web.enable-lifecycle"
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/config:/etc/prometheus
    networks:
      - ecommerce-network
    
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - ecommerce-network

  user-service:
    depends_on: 
      - apigateway-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
      LOGGING.FILE: /api-logs/users-ws.log
    networks:
      - ecommerce-network

  order-service:
    depends_on:
      - apigateway-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mydb
      LOGGING.FILE: /api-logs/users-ws.log
    networks:
      - ecommerce-network


networks:
  ecommerce-network:
    driver: bridge